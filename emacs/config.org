#+startup: overview
**** exec path
     brew installs it's binaries to a non-standard path, emacs needs
     to be told to look for them
     #+begin_src emacs-lisp
       (add-to-list 'exec-path "/usr/local/bin")
       (add-to-list 'exec-path "~/.local/bin")
       (add-to-list 'exec-path "~/.local/share/brew/bin")
       (add-to-list 'exec-path "~/.nix-profile/bin")
     #+end_src
**** load theme
     #+begin_src emacs-lisp
       (use-package cyberpunk-theme
	 :init(load-theme 'cyberpunk t))
       (fringe-mode 0)
     #+end_src
**** font
     #+begin_src emacs-lisp
       (add-to-list 'default-frame-alist '(font . "SF Mono-14" ))
     #+end_src
**** garbage collection magic hack
     does magic on the GC values to make start-up fast but the GC values
     not ridiculous.
     #+begin_src emacs-lisp
       (use-package gcmh
	 :diminish gcmh-mode
	 :init(gcmh-mode +1))
     #+end_src
**** evil
     #+begin_src emacs-lisp
     (use-package undo-tree
    :init(global-undo-tree-mode 1))
       (use-package evil
	 :demand t
	 :config
	 (setq evil-auto-indent t
	       evil-ex-complete-emacs-commands t
	       evil-undo-system 'undo-tree
	       evil-undo-function 'undo-tree-undo
	       evil-redo-function 'undo-tree-redo
	       evil-magic 'very-magic
	       evil-search-module 'evil-search
	       evil-shift-width 2
	       evil-toggle-key "C-M-z"
	       evil-want-C-w-delete nil
	       evil-want-C-w-in-emacs-state nil
	       evil-want-fine-undo t
	       evil-normal-state-cursor '("#8a8a8a" box)
	       evil-operator-state-cursor '("#8a8a8a" evil-half-cursor)
	       evil-replace-state-cursor '("#884444" box)
	       evil-insert-state-cursor `("#8a8a8a" bar)
	       evil-emacs-state-cursor `("#5f8700" bar))
	 :init
	 (setq evil-want-keybinding nil)
	 (evil-mode 1))
       (use-package evil-collection
	 :straight(evil-collection :host github :repo "alex-eyre/evil-collection")
	 :requires evil
	 :config(setq evil-collection-setup-minibuffer t)
	 :init(evil-collection-init))
       (use-package evil-magit
	 :requires evil
	 :init(require 'evil-magit)
	 :config(setq evil-magit-state 'normal))

       (use-package evil-snipe
	 :diminish evil-snipe-mode
	 :diminish evil-snipe-override-mode
	 :diminish evil-snipe-local-mode
	 :requires evil
	 :hook(magit-mode . turn-off-evil-snipe-override-mode)
	 :init
	 (evil-snipe-mode +1)
	 (evil-snipe-override-mode +1))
     #+end_src
**** hydra
I'm not doing a great deal with hydra rn but I want to do more with it
in the future, I'm not very happy about the state of my window
management rn, feels very clunky. I'm hoping that hydra can help.
#+begin_src emacs-lisp :tangle no
(use-package hydra)
#+end_src

#+RESULTS:
: hydra-ivy/body

**** disable splash screen
     #+begin_src emacs-lisp
       (setq inhibit-startup-message t) 
       (setq initial-scratch-message nil)
     #+end_src
**** org tweaks
     #+BEGIN_SRC emacs-lisp
       (add-hook 'org-mode-hook #'auto-fill-mode)
       (require 'org-tempo)
       (org-babel-do-load-languages
	'org-babel-load-languages '((python . t) (emacs-lisp . t) (shell . t)))
     #+END_SRC

     #+RESULTS:

**** org roam
     #+begin_src emacs-lisp
       (use-package org-roam
	 :ensure t
	 :hook
	 (after-init . org-roam-mode)
	 :custom
	 (org-roam-directory "~/Documents/notes/")
	 :config
	 (setq org-roam-dailies-directory "daily"
	       org-roam-dailies-capture-templates
	       '(("d" "default" entry
		  #'org-roam-capture--get-point
		  "* %?"
		  :file-name "daily/%<%Y-%m-%d>"
		  :head "#+title: %<%Y-%m-%d>\n\n")))
	 :bind (("C-c c" . org-roam-dailies-capture-today)
		:map org-roam-mode-map
		(("C-c n l" . org-roam)
		 ("C-c n f" . org-roam-find-file)
		 ("C-c n g" . org-roam-graph))
		:map org-mode-map
		(("C-c n i" . org-roam-insert))
		(("C-c n I" . org-roam-insert-immediate))))
       (use-package deft
	 :after org
	 :bind("C-c n d" . deft)
	 :custom
	 (deft-recursive t)
	 (deft-use-filter-string-for-filename t)
	 (deft-default-extension "org")
	 (deft-directory "~/Documents/Notes"))

     #+end_src

     #+RESULTS:
     : deft

**** misc utils.
***** restart emacs
      #+begin_src emacs-lisp
	(use-package restart-emacs
	  :commands(restart-emacs))
      #+end_src
**** line numbers
     #+begin_src emacs-lisp
       (defun display-line-numbers/relative ()
	 "Relative"
	 (interactive)
	 (menu-bar--display-line-numbers-mode-relative))

       (defun display-line-numbers/absolute ()
	 "Absolute"
	 (interactive)
	 (menu-bar--display-line-numbers-mode-absolute))
       (use-package display-line-numbers
	 :hook
	 (evil-insert-state-exit . (lambda () (display-line-numbers/relative)))
	 (evil-insert-state-entry . (lambda () (display-line-numbers/absolute)))
	 (prog-mode . display-line-numbers-mode)
	 (org-mode . (lambda () (display-line-numbers-mode -1))))
     #+end_src
**** pdf
     #+begin_src emacs-lisp
       (use-package pdf-tools
	 :load-path "site-lisp/pdf-tools/lisp"
	 :magic ("%PDF" . pdf-view-mode)
	 :config
	 (pdf-tools-install :no-query))
     #+end_src

**** modeline
     #+begin_src emacs-lisp
       (use-package telephone-line
	 :config
	 (setq telephone-line-lhs
	       '((evil   . (telephone-line-evil-tag-segment))
		 (accent . (telephone-line-vc-segment
			    telephone-line-erc-modified-channels-segment
			    telephone-line-process-segment))
		 (nil    . (telephone-line-buffer-segment)))
	       telephone-line-rhs
	       '((nil    . (telephone-line-misc-info-segment))
		 (accent . (telephone-line-major-mode-segment))
		 (evil   . (telephone-line-airline-position-segment))))
	 (telephone-line-mode 1))
     #+end_src

**** languages
***** haskell
      #+begin_src emacs-lisp
	(use-package haskell-mode
	  :hook(haskell-mode . interactive-haskell-mode)
	  :mode "\\.hs\\'"
	  :interpreter "ghc")
      #+end_src
**** ivy & co.
     #+begin_src emacs-lisp
       (use-package ivy
	 :bind(:map ivy-minibuffer-map
		    ("C-k" . ivy-previous-line)
		    ("C-j" . ivy-next-line)))
       (use-package counsel
	 :init(counsel-mode 1))
       (use-package swiper
	 :config
	 (define-key ivy-minibuffer-map (kbd "<ESC>") 'minibuffer-keyboard-quit)
	 (define-key swiper-map (kbd "<ESC>") 'minibuffer-keyboard-quit)
	 :bind(("C-s" . swiper)))
       (use-package ivy-prescient
	 :requires ivy
	:init(ivy-prescient-mode 1))
     #+end_src
**** ace window
     #+begin_src emacs-lisp
       (use-package ace-window
	 :config
	 (setq aw-keys '(?a ?o?e ?u ?i)
	       aw-dispatch-always t
	       aw-dispatch-alist
	       '((?\; aw-delete-window "Delete Window")
		 (?, aw-swap-window "Swap Windows")
		 (?. delete-other-windows "Delete Other Windows")
		 (?? aw-show-dispatch-help)))
	 :bind("M-o" . ace-window))
     #+end_src
**** apheleia
     #+begin_src emacs-lisp
       (use-package apheleia
	 :straight(:host github :repo "raxod502/apheleia")
	 :hook(prog-mode . apheleia-mode))
     #+end_src
     
**** auto revert mode
     #+begin_src emacs-lisp
       (global-auto-revert-mode 1)
     #+end_src
**** zygospore
     #+begin_src emacs-lisp
       (use-package zygospore
	 :bind(("C-x &" . zygospore-toggle-delete-other-windows)))
     #+end_src
**** window management
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-x [") 'split-window-below)
       (global-set-key (kbd "C-x {") 'split-window-right)
     #+end_src
**** smart parens
**** scratch
     #+begin_src emacs-lisp
       (use-package persistent-scratch
       :init(persistent-scratch-setup-default))
       (setq inital-major-mode 'org-mode)
     #+end_src
**** centered cursor
     #+begin_src emacs-lisp
       (use-package centered-cursor-mode
	 :hook(prog-mode . centered-cursor-mode))
     #+end_src
**** shx
     #+begin_src emacs-lisp
     (setq explicit-shell-file-name "/bin/bash")
       (use-package shx
	 :config(setq shx-max-output 1024
		      shx-max-input 1024)
	 :hook(comint-mode . shx-mode))
     #+end_src
**** popwin
     #+begin_src emacs-lisp
     (use-package popwin
     :hook(after-init .  popwin))
     #+end_src
**** minibuffer completions
     without this space will attempt to complete a minibuffer. I've
     never wanted this, I just want spaces.
     #+begin_src emacs-lisp
     (define-key minibuffer-local-completion-map (kbd "SPC") 'self-insert-command)
     #+end_src

     #+RESULTS:
     : self-insert-command
**** dired
     #+begin_src emacs-lisp
       (use-package dired-x
	 :straight nil
	 :hook(dired-mode . dired-omit-mode)
	 :init(require 'dired-x)
	 :config(setq dired-omit-files (concat dired-omit-files "\\|^\\..+$")))
     #+end_src
**** hunspell
oi oi mate i'm english innit
#+begin_src emacs-lisp
(use-package flyspell
  :if (not (eq system-type 'windows-nt))
  :ensure-system-package(hunspell . hunspell)
  :config
  (setq ispell-program-name "hunspell"
        ispell-hunspell-dict-paths-alist
        '(("en_GB" "~/.nix-profile/share/hunspell/en_GB"))
        ispell-local-dictionary "en_GB")
  :hook(org-mode . flyspell-mode))
#+end_src

#+RESULTS:
| flyspell-mode | (lambda nil (display-line-numbers-mode -1)) | org-tempo-setup | auto-fill-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |
**** ipython
     #+begin_src emacs-lisp
       (use-package ein)
     #+end_src
