#+startup: overview
**** exec path
     brew installs it's binaries to a non-standard path, emacs needs
     to be told to look for them
     #+begin_src emacs-lisp
			 (straight-use-package 'exec-path-from-shell)
			 (when (memq window-system '(mac ns x))
				 (exec-path-from-shell-initialize))
			 ;; (add-to-list 'exec-path "/usr/local/bin")
			 ;; (add-to-list 'exec-path "~/.local/bin")
			 ;; (add-to-list 'exec-path "~/.local/share/brew/bin")
			 ;; (add-to-list 'exec-path "~/.nix-profile/bin")
     #+end_src
**** fullscreen on mac
		 #+begin_src emacs-lisp
			 (when (memq window-system '(mac))
         (toggle-frame-fullscreen))
		 #+end_src
**** load theme
     #+begin_src emacs-lisp
       (use-package cyberpunk-theme
	 :init(load-theme 'cyberpunk t))
       (fringe-mode 0)
     #+end_src
**** font
     #+begin_src emacs-lisp
			 (add-to-list 'default-frame-alist '(font . "Terminus (TTF)-16:antialias=false" ))
			 (set-face-italic-p 'italic nil)
			 (set-face-bold-p 'bold nil)
			 (set-face-italic 'font-lock-comment-face nil)
     #+end_src
**** garbage collection magic hack
     does magic on the GC values to make start-up fast but the GC values
     not ridiculous.
     #+begin_src emacs-lisp
       (use-package gcmh
	 :diminish gcmh-mode
	 :init(gcmh-mode +1))
     #+end_src
**** evil
     #+begin_src emacs-lisp
     (use-package undo-tree
    :init(global-undo-tree-mode 1))
       (use-package evil
	 :demand t
	 :config
	 (setq evil-auto-indent t
	       evil-ex-complete-emacs-commands t
	       evil-undo-system 'undo-tree
	       evil-undo-function 'undo-tree-undo
	       evil-redo-function 'undo-tree-redo
	       evil-magic 'very-magic
	       evil-search-module 'evil-search
	       evil-shift-width 2
	       evil-toggle-key "C-M-z"
	       evil-want-C-w-delete nil
	       evil-want-C-w-in-emacs-state nil
	       evil-want-fine-undo t
	       evil-normal-state-cursor '("#8a8a8a" box)
	       evil-operator-state-cursor '("#8a8a8a" evil-half-cursor)
	       evil-replace-state-cursor '("#884444" box)
	       evil-insert-state-cursor `("#8a8a8a" bar)
	       evil-emacs-state-cursor `("#5f8700" bar))
	 :init
	 (setq evil-want-keybinding nil)
	 (evil-mode 1))
       (use-package evil-collection
	 :straight(evil-collection :host github :repo "alex-eyre/evil-collection")
	 :requires evil
	 :config(setq evil-collection-setup-minibuffer t)
	 :init(evil-collection-init))
       (use-package evil-magit
	 :requires evil
	 :init(require 'evil-magit)
	 :config(setq evil-magit-state 'normal))

       (use-package evil-snipe
	 :diminish evil-snipe-mode
	 :diminish evil-snipe-override-mode
	 :diminish evil-snipe-local-mode
	 :requires evil
	 :hook(magit-mode . turn-off-evil-snipe-override-mode)
	 :init
	 (evil-snipe-mode +1)
	 (evil-snipe-override-mode +1))
     #+end_src
**** hydra
I'm not doing a great deal with hydra rn but I want to do more with it
in the future, I'm not very happy about the state of my window
management rn, feels very clunky. I'm hoping that hydra can help.
#+begin_src emacs-lisp :tangle no
(use-package hydra)
#+end_src

#+RESULTS:
: hydra-ivy/body

**** disable splash screen
     #+begin_src emacs-lisp
       (setq inhibit-startup-message t) 
       (setq initial-scratch-message nil)
     #+end_src
**** org tweaks
     #+BEGIN_SRC emacs-lisp
       (add-hook 'org-mode-hook #'auto-fill-mode)
       (require 'org-tempo)
       (org-babel-do-load-languages
	'org-babel-load-languages '((python . t) (emacs-lisp . t) (shell . t)))
     #+END_SRC

     #+RESULTS:
**** python
     #+begin_src emacs-lisp
(setq python-shell-interpreter "ipython")
     #+end_src
**** org roam
     #+begin_src emacs-lisp
       (use-package org-roam
	 :ensure t
	 :hook
	 (after-init . org-roam-mode)
	 :custom
	 (org-roam-directory "~/Documents/notes/")
	 :config
	 (setq org-roam-dailies-directory "daily"
	       org-roam-dailies-capture-templates
	       '(("d" "default" entry
		  #'org-roam-capture--get-point
		  "* %?"
		  :file-name "daily/%<%Y-%m-%d>"
		  :head "#+title: %<%Y-%m-%d>\n\n")))
	 :bind (("C-c c" . org-roam-dailies-capture-today)
		 ("C-c n f" . org-roam-find-file)
		:map org-roam-mode-map
		(("C-c n l" . org-roam)
		 ("C-c n g" . org-roam-graph))
		:map org-mode-map
		(("C-c n i" . org-roam-insert))
		(("C-c n I" . org-roam-insert-immediate))))
       (use-package deft
	 :after org
	 :bind("C-c n d" . deft)
	 :custom
	 (deft-recursive t)
	 (deft-use-filter-string-for-filename t)
	 (deft-default-extension "org")
	 (deft-directory "~/Documents/Notes"))

     #+end_src

     #+RESULTS:
     : deft

**** misc utils.
***** restart emacs
      #+begin_src emacs-lisp
	(use-package restart-emacs
	  :commands(restart-emacs))
      #+end_src
**** line numbers
     #+begin_src emacs-lisp
       (defun display-line-numbers/relative ()
	 "Relative"
	 (interactive)
	 (menu-bar--display-line-numbers-mode-relative))

       (defun display-line-numbers/absolute ()
	 "Absolute"
	 (interactive)
	 (menu-bar--display-line-numbers-mode-absolute))
       (use-package display-line-numbers
	 :hook
	 (evil-insert-state-exit . (lambda () (display-line-numbers/relative)))
	 (evil-insert-state-entry . (lambda () (display-line-numbers/absolute)))
	 (prog-mode . display-line-numbers-mode)
	 (org-mode . (lambda () (display-line-numbers-mode -1))))
     #+end_src
**** pdf
     #+begin_src emacs-lisp
       (use-package pdf-tools
	 :load-path "site-lisp/pdf-tools/lisp"
	 :magic ("%PDF" . pdf-view-mode)
	 :config
	 (pdf-tools-install :no-query))
     #+end_src

**** modeline
     #+begin_src emacs-lisp
       (use-package telephone-line
	 :config
	 (setq telephone-line-lhs
	       '((evil   . (telephone-line-evil-tag-segment))
		 (accent . (telephone-line-vc-segment
			    telephone-line-erc-modified-channels-segment
			    telephone-line-process-segment))
		 (nil    . (telephone-line-buffer-segment)))
	       telephone-line-rhs
	       '((nil    . (telephone-line-misc-info-segment))
		 (accent . (telephone-line-major-mode-segment))
		 (evil   . (telephone-line-airline-position-segment))))
	 (telephone-line-mode 1))
     #+end_src

**** languages
***** lsp
      #+begin_src emacs-lisp
								;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
								(setq lsp-keymap-prefix "s-l")

								(use-package lsp-mode
									:hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
									 (python-mode . lsp)
									 (rust-mode . lsp)
									 (haskell-mode . lsp)
									 (c++-mode . lsp)
									 (java-mode . lsp)
									 ;; if you want which-key integration
									 (lsp-mode . lsp-enable-which-key-integration))
									:commands lsp)
								(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
								(use-package company
				:disabled t
									:config(setq company-minimum-prefix-length 1
												 company-idle-delay 0.0) ;; default is 0.2
									:bind(:map company-active-map
												("TAB" . company-complete-selection))
									:hook(prog-mode . company-mode))
								(use-package company-lsp
									:requires company
									:requires lsp

									:config(push 'company-lsp company-backends))
      #+end_src

      #+RESULTS:
***** java
      #+begin_src emacs-lisp
		(use-package lsp-java
	:after lsp)
      #+end_src

      #+RESULTS:

***** haskell
      #+begin_src emacs-lisp
	(use-package haskell-mode
	  :hook(haskell-mode . interactive-haskell-mode)
	  :mode "\\.hs\\'"
	  :interpreter "ghc")
      #+end_src
***** rust
      #+begin_src emacs-lisp
	(use-package rust-mode
	  :mode "\\.rs\\'")
      #+end_src

      #+RESULTS:
      : ((\.rs\' . rust-mode) (\.ipynb\' . ein:ipynb-mode) (\.nix\' . nix-mode) (\.hs\' . haskell-mode) (\.hsc\' . haskell-mode) (\.l[gh]s\' . haskell-literate-mode) (\.hsig\' . haskell-mode) (\.[gh]s\' . haskell-mode) (\.cabal\'\|/cabal\.project\|/\.cabal/config\' . haskell-cabal-mode) (\.chs\' . haskell-c2hs-mode) (\.ghci\' . ghci-script-mode) (\.dump-simpl\' . ghc-core-mode) (\.hcr\' . ghc-core-mode) (/git-rebase-todo\' . git-rebase-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

***** nix
      #+begin_src emacs-lisp
	(use-package nix-mode
	  :mode "\\.nix\\'")
      #+end_src

      #+RESULTS:
      : ((\.nix\' . nix-mode) (\.ipynb\' . ein:ipynb-mode) (\.hs\' . haskell-mode) (\.hsc\' . haskell-mode) (\.l[gh]s\' . haskell-literate-mode) (\.hsig\' . haskell-mode) (\.[gh]s\' . haskell-mode) (\.cabal\'\|/cabal\.project\|/\.cabal/config\' . haskell-cabal-mode) (\.chs\' . haskell-c2hs-mode) (\.ghci\' . ghci-script-mode) (\.dump-simpl\' . ghc-core-mode) (\.hcr\' . ghc-core-mode) (/git-rebase-todo\' . git-rebase-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

***** js
			#+begin_src emacs-lisp
				(use-package prettier
:hook((js-mode js-jsx-mode) . prettier-mode))
			#+end_src

			#+RESULTS:
			| lambda | nil | (prettier-mode t) |

**** ivy & co.
     #+begin_src emacs-lisp
       (use-package ivy
	 :bind(:map ivy-minibuffer-map
		    ("C-k" . ivy-previous-line)
		    ("C-j" . ivy-next-line)))
       (use-package counsel
	 :init(counsel-mode 1))
       (use-package swiper
	 :config
	 (define-key ivy-minibuffer-map (kbd "<ESC>") 'minibuffer-keyboard-quit)
	 (define-key swiper-map (kbd "<ESC>") 'minibuffer-keyboard-quit)
	 :bind(("C-s" . swiper)))
       (use-package ivy-prescient
	 :requires ivy
	:init(ivy-prescient-mode 1))
     #+end_src
**** ace window
     #+begin_src emacs-lisp
       (use-package ace-window
	 :config
	 (setq aw-keys '(?a ?o?e ?u ?i)
	       aw-dispatch-always t
	       aw-dispatch-alist
	       '((?\; aw-delete-window "Delete Window")
		 (?, aw-swap-window "Swap Windows")
		 (?. delete-other-windows "Delete Other Windows")
		 (?? aw-show-dispatch-help)))
	 :bind("M-o" . ace-window))
     #+end_src
**** auto revert mode
     #+begin_src emacs-lisp
       (global-auto-revert-mode 1)
     #+end_src
**** zygospore
     #+begin_src emacs-lisp
       (use-package zygospore
	 :bind(("C-x &" . zygospore-toggle-delete-other-windows)))
     #+end_src
**** window management
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-x [") 'split-window-below)
       (global-set-key (kbd "C-x {") 'split-window-right)
     #+end_src
**** smart parens
**** scratch
     #+begin_src emacs-lisp
			 (use-package persistent-scratch
			 :init(persistent-scratch-setup-default))
			 (setq inital-major-mode 'org-mode)
     #+end_src
**** dashboard
		 #+begin_src emacs-lisp
										 (use-package dashboard
											 :config
(setq dashboard-projects-backend 'projectile)
			 (push '(projects . 5) dashboard-items)
							(dashboard-setup-startup-hook))
		 #+end_src

		 #+RESULTS:
		 : t

**** centered cursor
     #+begin_src emacs-lisp
       (use-package centered-cursor-mode
	 :hook(prog-mode . centered-cursor-mode))
     #+end_src
**** shx
     #+begin_src emacs-lisp
     (setq explicit-shell-file-name "/bin/bash")
       (use-package shx
	 :config(setq shx-max-output 1024
		      shx-max-input 1024)
	 :hook(comint-mode . shx-mode))
     #+end_src
**** popwin
     #+begin_src emacs-lisp
     (use-package popwin
     :hook(after-init .  popwin))
     #+end_src
**** minibuffer completions
     without this space will attempt to complete a minibuffer. I've
     never wanted this, I just want spaces.
     #+begin_src emacs-lisp
     (define-key minibuffer-local-completion-map (kbd "SPC") 'self-insert-command)
     #+end_src

     #+RESULTS:
     : self-insert-command
**** dired
     #+begin_src emacs-lisp
       (use-package dired-x
	 :straight nil
	 :hook(dired-mode . dired-omit-mode)
	 :init(require 'dired-x)
	 :config(setq dired-omit-files (concat dired-omit-files "\\|^\\..+$")))
     #+end_src
**** hunspell
oi oi mate i'm english innit
#+begin_src emacs-lisp
(use-package flyspell
  :if (not (eq system-type 'windows-nt))
  :ensure-system-package(hunspell . hunspell)
  :config
  (setq ispell-program-name "hunspell"
        ispell-hunspell-dict-paths-alist
        '(("en_GB" "~/.nix-profile/share/hunspell/en_GB"))
        ispell-local-dictionary "en_GB")
  :hook(org-mode . flyspell-mode))
#+end_src

#+RESULTS:
| flyspell-mode | (lambda nil (display-line-numbers-mode -1)) | org-tempo-setup | auto-fill-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |
**** ipython
     #+begin_src emacs-lisp
       (use-package ein)
     #+end_src

**** ranger
     #+begin_src emacs-lisp
       (use-package ranger
:bind("C-l" . ranger))
     #+end_src

     #+RESULTS:
     : ranger

**** tabs
     #+begin_src emacs-lisp
(setq-default tab-width 2)
     #+end_src

     #+RESULTS:

**** eww
		 #+begin_src emacs-lisp
(defun my/eww-toggle-images ()
  "Toggle whether images are loaded and reload the current page fro cache."
  (interactive)
  (setq-local shr-inhibit-images (not shr-inhibit-images))
  (eww-reload t)
  (message "Images are now %s"
           (if shr-inhibit-images "off" "on")))

(define-key eww-mode-map (kbd "I") #'my/eww-toggle-images)
(define-key eww-link-keymap (kbd "I") #'my/eww-toggle-images)

;; minimal rendering by default
(setq-default shr-inhibit-images t)   ; toggle with `I`
(setq-default shr-use-fonts nil)      ; toggle with `F`
		 #+end_src

**** yasnippet
		 #+begin_src emacs-lisp
			 (use-package yasnippet
				 :demand t
				 :config
				 (yas-reload-all)
				 :hook(prog-mode . yas-minor-mode))
			 (straight-use-package 'yasnippet-snippets)
		 #+end_src

		 #+RESULTS:
		 : t

**** projectile
		 #+begin_src emacs-lisp
			 (use-package projectile
				 :bind(:map projectile-mode-map
										("s-," . projectile-command-map))
				 :init(projectile-mode +1))
			 (use-package counsel-projectile
				 :init(counsel-projectile-mode +1))
		 #+end_src

		 #+RESULTS:


**** direnv
		 #+begin_src emacs-lisp
(use-package direnv
 :config
 (direnv-mode))
		 #+end_src

		 #+RESULTS:
		 : t
