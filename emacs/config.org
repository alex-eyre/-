#+startup: overview 
**** server
#+begin_src emacs-lisp
(server-start)
#+end_src
**** elpatch
#+begin_src emacs-lisp
(straight-use-package 'el-patch)
#+end_src
**** exec path
     brew installs it's binaries to a non-standard path, emacs needs
     to be told to look for them
     #+begin_src emacs-lisp
					 (use-package exec-path-from-shell
	   :commands(exec-path-from-shell-initialize)
			  :config(setq exec-path-from-shell-arguments '("-l")))
					 (when (memq window-system '(ns x))
						 (exec-path-from-shell-initialize))
(add-to-list 'exec-path "~/.local/share/brew/bin")
     #+end_src

	 #+RESULTS:
	 | ~/.local/share/brew/bin | /usr/local/bin/ | /usr/local/sbin/ | /Users/alex/.nix-profile/bin/ | /run/current-system/sw/bin/ | /nix/var/nix/profiles/default/bin/ | /usr/bin/ | /usr/sbin/ | /bin/ | /sbin/ | /Users/alex/.local/share/brew/Cellar/emacs-plus@28/28.0.50/libexec/emacs/28.0.50/aarch64-apple-darwin20.4.0/ |

**** fullscreen on mac
		 #+begin_src emacs-lisp :tangle no
			   (when (eq window-system 'ns)
		   (toggle-frame-fullscreen))
		 #+end_src
**** load theme
     #+begin_src emacs-lisp
					 ;; (use-package cyberpunk-theme) ;; not in use <2021-03-10 Wed 03:31>
					 (use-package modus-themes
					   :config(setq modus-themes-mode-line '3d
									modus-themes-org-blocks 'rainbow
						   ;; A given style for every heading
	                         modus-themes-headings '((t . rainbow-section-no-bold))
									modus-themes-prompts 'intense-accented ))
					 (when (eq window-system 'ns) (progn
													(defun my/apply-theme (appearance)
													  "Load theme, taking current system APPEARANCE into consideration."
													  (mapc #'disable-theme custom-enabled-themes)
													  (pcase appearance
														('light (load-theme 'modus-operandi t))
														('dark (load-theme 'modus-vivendi t))))

													(add-hook 'ns-system-appearance-change-functions #'my/apply-theme))
						   (my/apply-theme ns-system-appearance))
					 (when (not (eq window-system 'ns))
					   (load-theme 'modus-vivendi t))
					 (fringe-mode 0)
     #+end_src

	 #+RESULTS:
	 : ((font . SF Mono) (vertical-scroll-bars) (left-fringe . 0) (right-fringe . 0))

**** multiterm
	 #+begin_src emacs-lisp
	   (use-package vterm
		 :custom(vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=yes -DCMAKE_OSX_ARCHITECTURES=arm64" "Use system libvterm"))
	   (use-package multi-vterm
		 :hook
		 (vterm-mode . (lambda ()
						 (setq-local evil-insert-state-cursor 'box)
						 (evil-insert-state)))
		 (vterm-mode . (lambda ()
						 (set (make-local-variable 'buffer-face-mode-face) '(default ((t (:height 2.0))))
						 (buffer-face-mode t))))
	   :config (setq 
				vterm-keymap-exceptions nil
				multi-term-program "/bin/zsh"
				multi-vterm-dedicated-select-after-open-p t)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
	   (evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
	   (evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
	   (evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
	   (evil-define-key 'normal vterm-mode-map (kbd ",n")       #'multi-vterm-next)
	   (evil-define-key 'normal vterm-mode-map (kbd ",p")       #'multi-vterm-prev)
	   (evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
	   (evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
	   (evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume)
	   :bind(("s-t" . multi-vterm-dedicated-close)
			 ("s-<return>" . (lambda () (interactive) (require 'multi-vterm) (if (multi-vterm-dedicated-exist-p)
																				 (multi-vterm-dedicated-select)
																			   (multi-vterm-dedicated-toggle))))
			 :map vterm-mode-map
			 ("<return>" . vterm-send-return)))

	 #+end_src

	 #+RESULTS:
	 : vterm-send-return

**** font
     #+begin_src emacs-lisp
	   ; (add-to-list 'default-frame-alist '(font . "Terminus (TTF)-16:antialias=false" ))
	   (add-to-list 'default-frame-alist '(font . "SF Mono" ))
	   (set-face-italic-p 'italic nil)
	   (set-face-bold-p 'bold nil)
	   (set-face-italic 'font-lock-comment-face nil)
     #+end_src
**** garbage collection magic hack
     does magic on the GC values to make start-up fast but the GC values
     not ridiculous.
     #+begin_src emacs-lisp
       (use-package gcmh
	 :diminish gcmh-mode
	 :init(gcmh-mode +1))
     #+end_src
     #+begin_src emacs-lisp
	   (use-package evil-org
		 :after org
		 :hook(org-mode . evil-org-mode)
		 :config
		 (require 'evil-org-agenda)
		 (evil-org-agenda-set-keys)
		 (evil-org-set-key-theme '(textobjects insert navigation additional shift heading)))
	   (use-package undo-tree
		 :init(global-undo-tree-mode 1))
	   (use-package evil
		 :demand t
		 :config
		 (setq evil-auto-indent t
			   evil-ex-complete-emacs-commands t
			   evil-undo-system 'undo-tree
			   evil-undo-function 'undo-tree-undo
			   evil-redo-function 'undo-tree-redo
			   evil-magic 'very-magic
			   evil-search-module 'evil-search
			   evil-shift-width 2
			   evil-toggle-key "C-M-z"
			   evil-want-C-w-delete nil
			   evil-want-C-i-jump nil
			   evil-want-C-w-in-emacs-state nil
			   evil-normal-state-cursor '("#8a8a8a" box)
			   evil-operator-state-cursor '("#8a8a8a" evil-half-cursor)
			   evil-replace-state-cursor '("#884444" box)
			   evil-insert-state-cursor `("#8a8a8a" bar)
			   evil-emacs-state-cursor `("#5f8700" bar)
			   evil-want-fine-undo t)
		 :init
		 (setq evil-want-keybinding nil)
		 (evil-mode 1))
     #+end_src

	 #+RESULTS:
	 | turn-off-evil-snipe-override-mode |
	 |                                   |
***** evil collection
	  #+begin_src emacs-lisp
		(use-package evil-collection
		  :config
		  (setq evil-collection-setup-minibuffer t
				evil-magit-state 'normal)
		  :init(evil-collection-init))
#+end_src

#+RESULTS:
| dvp-hjkl-rotation |

**** hydra
I'm not doing a great deal with hydra rn but I want to do more with it
in the future, I'm not very happy about the state of my window
management rn, feels very clunky. I'm hoping that hydra can help.
#+begin_src emacs-lisp :tangle no
(use-package hydra)
#+end_src

**** dvp
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
(use-package programmer-dvorak
  :hook((after-change-major-mode dashboard-mode) . (lambda () (set-input-method "programmer-dvorak"))))
#+end_src

#+RESULTS:
| (lambda nil (set-input-method programmer-dvorak)) | global-evil-collection-unimpaired-mode-enable-in-buffers | evil-mode-enable-in-buffers | global-undo-tree-mode-enable-in-buffers | global-eldoc-mode-enable-in-buffers | global-font-lock-mode-enable-in-buffers |

**** disable splash screen
     #+begin_src emacs-lisp
       (setq inhibit-startup-message t) 
       (setq initial-scratch-message nil)
     #+end_src
**** org tweaks
     #+BEGIN_SRC emacs-lisp
       (add-hook 'org-mode-hook #'auto-fill-mode)
       (require 'org-tempo)
       (org-babel-do-load-languages
	'org-babel-load-languages '((python . t) (emacs-lisp . t) (shell . t)))
     #+END_SRC

     #+RESULTS:
**** python
     #+begin_src emacs-lisp
(setq python-shell-interpreter "ipython")
     #+end_src
**** org
***** main
	 #+begin_src emacs-lisp
	   (setq org-image-actual-width (/ (display-pixel-width) 3))
	   (use-package org-download
		 :after org
		 :bind(:map org-mode-map
					(("s-Y" . org-download-screenshot)
					 ("s-y" . org-download-yank)))
		 :config(setq org-download-method 'attach)
		 :hook(dired-mode . org-download-enable))
	   (use-package org-roam
		 :ensure t
		 :hook
		 (after-init . org-roam-mode)
		 (org-capture-mode . evil-insert-state)
		 :custom
		 (org-roam-directory "~/Documents/notes/")
		 :config
		 (require 'org-roam-protocol)
  
		 (setq

		  org-roam-capture-templates '(("d" "default" plain #'org-roam-capture--get-point "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n#+created: <%<%Y-%m-%d %a %H:%M>>\n" :unnarrowed t))

		  org-roam-capture-ref-templates '(("w" "website" plain (function org-roam--capture-get-point)
											"%?"
											:file-name "%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}\" (current-time) t)"
											:head "#+title: ${title}\n#+roam_key: ${ref}\n#+created: %(format-time-string \"<%Y-%m-%d %a %H:%M>\")\n"))
		  org-roam-dailies-directory "daily"
		  org-roam-dailies-capture-templates '(("d" "default" entry
												#'org-roam-capture--get-point
												"* <%<%Y-%m-%d %a %H:%M>>\n%?"
												:file-name "daily/%<%Y-%m-%d>"
												:head "#+title: %<%Y-%m-%d>\n\n")))
		 :bind (("C-c c" . org-roam-dailies-capture-today)
				("C-c n f" . org-roam-find-file)
				:map org-roam-mode-map
				(("C-c n l" . org-roam)
				 ("C-c n g" . org-roam-graph))
				:map org-mode-map
				(("C-c n i" . org-roam-insert))
				(("C-c n I" . org-roam-insert-immediate))))
	 #+end_src

	 #+RESULTS:
	 : deft
***** capture window
	  stolen from [[https://gist.github.com/progfolio/af627354f87542879de3ddc30a31adc1]]
#+begin_src emacs-lisp
(defun my/delete-capture-frame (&rest _)
  "Delete frame with its name frame-parameter set to \"capture\"."
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))
(advice-add 'org-capture-finalize :after #'my/delete-capture-frame)
(defun my/org-capture-frame ()
  "Run org-capture in its own frame."
  (interactive)
  (require 'cl-lib)
  (select-frame-by-name "capture")
  (delete-other-windows)
  (cl-letf (((symbol-function 'switch-to-buffer-other-window) #'switch-to-buffer))
    (condition-case err
        (org-roam-dailies-capture-today)
      ;; "q" signals (error "Abort") in `org-capture'
      ;; delete the newly created frame in this scenario.
      (user-error (when (string= (cadr err) "Abort")
                    (delete-frame))))))
#+end_src

#+RESULTS:
: my/org-capture-frame
***** bullets
	  #+begin_src emacs-lisp
	  (use-package org-bullets
:hook(org-mode . org-bullets-mode))
	  #+end_src

	  #+RESULTS:
	  | org-bullets-mode | yas-minor-mode | flyspell-mode | (lambda nil (display-line-numbers-mode -1)) | org-tempo-setup | auto-fill-mode | evil-org-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |
***** headers
	  #+begin_src emacs-lisp
    (custom-theme-set-faces
     'user
     `(org-level-4 ((t (:height 1.1))))
     `(org-level-3 ((t (:height 1.25))))
     `(org-level-2 ((t (:height 1.5))))
     `(org-level-1 ((t (:height 1.75))))
     `(org-document-title ((t (:height 2.0 :underline nil)))))
	  #+end_src

	  #+RESULTS:
**** misc utils.
***** restart emacs
	  #+begin_src emacs-lisp
	(use-package restart-emacs
	  :commands(restart-emacs))
      #+end_src
**** line numbers
     #+begin_src emacs-lisp
	   (defun display-line-numbers/relative ()
		 "Relative"
		 (interactive)
		 (when (not (eq 'major-mode 'org-mode))
		   (menu-bar--display-line-numbers-mode-relative)))

	   (defun display-line-numbers/absolute ()
		 "Absolute line numbers"
		 (interactive)
		 (when (not (eq 'major-mode 'org-mode))
		   (menu-bar--display-line-numbers-mode-absolute)))
	   (use-package display-line-numbers
		 :hook
		 (evil-insert-state-exit . (lambda () (display-line-numbers/relative)))
		 (evil-insert-state-entry . (lambda () (display-line-numbers/absolute)))
		 (prog-mode . display-line-numbers-mode)
		 (org-mode . (lambda () (display-line-numbers-mode -1))))
     #+end_src

**** erc
	 #+begin_src emacs-lisp
(bind-key "C-c e" 'erc)
	 #+end_src

	 #+RESULTS:
	 : erc

**** modeline
     #+begin_src emacs-lisp
		 (use-package telephone-line
	   :config(setq telephone-line-lhs
			 '((evil   . (telephone-line-evil-tag-segment))
		   (accent . (telephone-line-vc-segment
				  telephone-line-erc-modified-channels-segment
				  telephone-line-process-segment))
		   (nil    . (telephone-line-buffer-segment)))
			 telephone-line-rhs
			 '((nil    . (telephone-line-misc-info-segment))
		   (accent . (telephone-line-major-mode-segment))
		   (evil   . (telephone-line-airline-position-segment))))
:init(telephone-line-mode 1))
     #+end_src

	 #+RESULTS:
	 : t

**** which key
	 #+begin_src emacs-lisp
(use-package which-key :config (which-key-mode))
	 #+end_src
**** languages
***** lsp
      #+begin_src emacs-lisp
		;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
		(setq lsp-keymap-prefix "s-l")

		(use-package lsp-mode
          :config(setq lsp-completion-enable-additional-text-edit nil)
		  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
				 (python-mode . lsp)
				 (rust-mode . lsp)
				 (haskell-mode . lsp)
				 (c++-mode . lsp)
				 ;; if you want which-key integration
				 (lsp-mode . lsp-enable-which-key-integration))
		  :commands lsp)
		(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
		(use-package company
		  :disabled t
		  :config(setq company-minimum-prefix-length 1
					   company-idle-delay 0.0) ;; default is 0.2
		  :bind(:map company-active-map
					 ("TAB" . company-complete-selection))
		  :hook(prog-mode . company-mode))
		(use-package company-lsp
		  :requires company
		  :requires lsp

		  :config(push 'company-lsp company-backends))
(use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
      #+end_src
	  
      #+RESULTS:
***** java
      #+begin_src emacs-lisp
	(use-package lsp-java

	  :hook(java-mode . lsp))
      #+end_src

      #+RESULTS:

***** haskell
      #+begin_src emacs-lisp
	(use-package haskell-mode
	  :hook(haskell-mode . interactive-haskell-mode)
	  :mode "\\.hs\\'"
	  :interpreter "ghc")
      #+end_src
***** rust
      #+begin_src emacs-lisp
	(use-package rust-mode
	  :mode "\\.rs\\'")
      #+end_src

      #+RESULTS:

***** nix
      #+begin_src emacs-lisp
	(use-package nix-mode
	  :mode "\\.nix\\'")
      #+end_src

      #+RESULTS:
      : ((\.nix\' . nix-mode) (\.ipynb\' . ein:ipynb-mode) (\.hs\' . haskell-mode) (\.hsc\' . haskell-mode) (\.l[gh]s\' . haskell-literate-mode) (\.hsig\' . haskell-mode) (\.[gh]s\' . haskell-mode) (\.cabal\'\|/cabal\.project\|/\.cabal/config\' . haskell-cabal-mode) (\.chs\' . haskell-c2hs-mode) (\.ghci\' . ghci-script-mode) (\.dump-simpl\' . ghc-core-mode) (\.hcr\' . ghc-core-mode) (/git-rebase-todo\' . git-rebase-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

***** js
			#+begin_src emacs-lisp
				(use-package prettier
:hook((js-mode js-jsx-mode) . prettier-mode))
			#+end_src

			#+RESULTS:
			| lambda | nil | (prettier-mode t) |

**** ivy & co.
     #+begin_src emacs-lisp
			  (use-package ivy
			:bind(:map ivy-minibuffer-map
			("C-M-a" . ivy-immediate-done)
				   ("C-k" . ivy-previous-line)
				   ("C-j" . ivy-next-line)))
			  (use-package counsel
			:init
	   (counsel-mode 1)
	   (ivy-mode 1))
			  (use-package swiper
			:config
			(define-key ivy-minibuffer-map (kbd "<ESC>") 'minibuffer-keyboard-quit)
			(define-key swiper-map (kbd "<ESC>") 'minibuffer-keyboard-quit)
			:bind(("C-s" . swiper)))
			  (use-package ivy-prescient
			:requires ivy
		   :init(ivy-prescient-mode 1))
     #+end_src

	 #+RESULTS:

**** ace window
     #+begin_src emacs-lisp
       (use-package ace-window
	 :config
	 (setq aw-keys '(?a ?o?e ?u ?i)
	       aw-dispatch-always t
	       aw-dispatch-alist
	       '((?\; aw-delete-window "Delete Window")
		 (?, aw-swap-window "Swap Windows")
		 (?. delete-other-windows "Delete Other Windows")
		 (?? aw-show-dispatch-help)))
	 :bind("M-o" . ace-window))
     #+end_src
**** auto revert mode
     #+begin_src emacs-lisp
       (global-auto-revert-mode 1)
     #+end_src
**** zygospore
	 #+begin_src emacs-lisp
       (use-package zygospore
	 :bind(("C-x 1" . zygospore-toggle-delete-other-windows)))
     #+end_src
**** window management
     #+begin_src emacs-lisp :tangle no
       (global-set-key (kbd "C-x [") 'split-window-below)
       (global-set-key (kbd "C-x {") 'split-window-right)
     #+end_src
**** smart parens
**** scratch
     #+begin_src emacs-lisp
			 (use-package persistent-scratch
			 :init(persistent-scratch-setup-default))
			 (setq inital-major-mode 'org-mode)
     #+end_src
**** dashboard
		 #+begin_src emacs-lisp
										 (use-package dashboard
											 :config
(setq dashboard-projects-backend 'projectile)
			 (push '(projects . 5) dashboard-items)
							(dashboard-setup-startup-hook))
		 #+end_src

		 #+RESULTS:
		 : t

**** centered cursor
     #+begin_src emacs-lisp
       (use-package centered-cursor-mode
	 :hook(prog-mode . centered-cursor-mode))
     #+end_src
**** shx
     #+begin_src emacs-lisp
     (setq explicit-shell-file-name "/bin/bash")
       (use-package shx
	 :config(setq shx-max-output 1024
		      shx-max-input 1024)
	 :hook(comint-mode . shx-mode))
     #+end_src
**** popwin
     #+begin_src emacs-lisp
     (use-package popwin
     :hook(after-init .  popwin))
     #+end_src
**** minibuffer completions
     without this space will attempt to complete a minibuffer. I've
     never wanted this, I just want spaces.
     #+begin_src emacs-lisp
     (define-key minibuffer-local-completion-map (kbd "SPC") 'self-insert-command)
     #+end_src

     #+RESULTS:
     : self-insert-command
**** dired
     #+begin_src emacs-lisp
       (use-package dired-x
	 :straight nil
	 :hook(dired-mode . dired-omit-mode)
	 :init(require 'dired-x)
	 :config(setq dired-omit-files (concat dired-omit-files "\\|^\\..+$")))
     #+end_src
**** no littering
	 #+begin_src emacs-lisp
	   (use-package no-littering)
	 #+end_src
**** hunspell

oi oi mate i'm english innit
#+begin_src emacs-lisp
	  (use-package flyspell
		:ensure-system-package(hunspell)
		:config

		(setq ispell-program-name (executable-find "hunspell")
			  ispell-local-dictionary "en_GB"
  ispell-local-dictionary-alist '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))
		:hook(org-mode . flyspell-mode))
#+end_src

#+RESULTS:
| flyspell-mode | (lambda nil (display-line-numbers-mode -1)) | org-tempo-setup | auto-fill-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |
**** ipython
     #+begin_src emacs-lisp
       (use-package ein)
     #+end_src

**** ranger
     #+begin_src emacs-lisp
       (use-package ranger
:bind("C-l" . ranger))
     #+end_src

     #+RESULTS:
     : ranger

**** tabs
     #+begin_src emacs-lisp
(setq-default tab-width 4)
     #+end_src

     #+RESULTS:

**** eww
		 #+begin_src emacs-lisp :tangle no
(defun my/eww-toggle-images ()
  "Toggle whether images are loaded and reload the current page fro cache."
  (interactive)
  (setq-local shr-inhibit-images (not shr-inhibit-images))
  (eww-reload t)
  (message "Images are now %s"
           (if shr-inhibit-images "off" "on")))

(define-key eww-mode-map (kbd "I") #'my/eww-toggle-images)
(define-key eww-link-keymap (kbd "I") #'my/eww-toggle-images)

;; minimal rendering by default
(setq-default shr-inhibit-images t)   ; toggle with `I`
(setq-default shr-use-fonts nil)      ; toggle with `F`
		 #+end_src

**** yasnippet
		 #+begin_src emacs-lisp
		   (use-package yasnippet
			 :hook
			 (org-mode . yas-minor-mode)
			 (prog-mode . yas-minor-mode))
		   (use-package yasnippet-snippets)
		   (use-package ivy-yasnippet
			 :bind("C-c s" . ivy-yasnippet))
		 #+end_src

		 #+RESULTS:
		 : ivy-yasnippet

**** projectile
		 #+begin_src emacs-lisp
			 (use-package projectile
				 :bind(:map projectile-mode-map
										("s-," . projectile-command-map))
				 :init(projectile-mode +1))
			 (use-package counsel-projectile
				 :init(counsel-projectile-mode +1))
		 #+end_src

		 #+RESULTS:

**** direnv
		 #+begin_src emacs-lisp
(use-package direnv
 :config
 (direnv-mode))
		 #+end_src

		 #+RESULTS:
		 : t

**** use nix
	 #+begin_src emacs-lisp
(setq system-packages-package-manager 'nix)
	 #+end_src

	 #+RESULTS:
	 : nix

**** posframe
	 #+begin_src emacs-lisp
	   (use-package ivy-posframe
		 :config(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
		 :init(ivy-posframe-mode 1)
		 )
	 #+end_src
	
**** mu4e
	 #+begin_src emacs-lisp
	   (use-package mu4e
         :disabled t
		 :straight ( :host github 
					 :repo "djcb/mu"  
					 :branch "master"
					 :files ("mu4e/*")   
					 :pre-build (("./autogen.sh") ("make"))) 
		 :custom   (mu4e-mu-binary (expand-file-name "mu/mu" (straight--repos-dir "mu")))
					  :config
					  (defun my-make-mu4e-context (name address)
						"Return a mu4e context named NAME with :match-func matching
									 its ADDRESS in From or CC fields of the parent message. The
									 context's `user-mail-address' is set to ADDRESS and its
									 `mu4e-compose-signature' to SIGNATURE."
						(lexical-let ((addr-lex address))
						  (make-mu4e-context :name name
											 :vars `((user-mail-address . ,address))
											 :match-func
											 (lambda (msg)
											   (when msg
												 (or (mu4e-message-contact-field-matches msg :to addr-lex)
													 (mu4e-message-contact-field-matches msg :cc addr-lex)))))))

					  (setq mu4e-get-mail-command "mbsync -a"
							mu4e-contexts
							`( ,(my-make-mu4e-context "edinburgh" "s2031787@ed.ac.uk"))))
	 #+end_src

	 #+RESULTS:
**** magit
#+begin_src emacs-lisp
(use-package magit
  :commands(magit))
#+end_src

#+RESULTS:
**** ref
#+begin_src emacs-lisp
  (use-package org-ref
	;; :straight(org-ref :type git :host github :repo "yyadavalli/org-ref-ivy")
	:bind(:map org-mode-map
("C-c ]" . org-ref-ivy-insert-cite-link))
	:config(setq reftex-default-bibliography '("~/Documents/notes/bibtex/references.bib"))
	org-ref-bibliography-notes "~/Documents/notes/bibtex/notes.org"
	org-ref-default-bibliography '("~/Documents/notes/bibtex/references.bib")
	org-ref-pdf-directory "~/Documents/notes/bibtex/bibtex-pdfs/")
#+end_src

#+RESULTS:
: org-ref-ivy-insert-cite-link

**** defuns
#+begin_src emacs-lisp
  (defun my/iterate-generation ()
  "Iterate the nix-darwin generation"
  (interactive)
(shell-command "darwin-rebuild switch"))
(defun my/iterate-generation-and-restart ()
"Iterate the nix-darwin generation and restart"
(interactive)
(my/iterate-generation)
(require 'restart-emacs)
(restart-emacs))
(provide 'my/iterate-generation)
(provide 'my/iterate-generation-and-restart)
#+end_src

#+RESULTS:
: my/iterate-generation-and-restart

**** meow
#+begin_src emacs-lisp
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-dvp)
  (meow-normal-define-key
   '("*" . meow-expand-0)
   '("=" . meow-expand-9)
   '("!" . meow-expand-8)
   '("[" . meow-expand-7)
   '("]" . meow-expand-6)
   '("{" . meow-expand-5)
   '("+" . meow-expand-4)
   '("}" . meow-expand-3)
   '(")" . meow-expand-2)
   '("(" . meow-expand-1)
   '("1" . digit-argument)
   '("2" . digit-argument)
   '("3" . digit-argument)
   '("4" . digit-argument)
   '("5" . digit-argument)
   '("6" . digit-argument)
   '("7" . digit-argument)
   '("8" . digit-argument)
   '("9" . digit-argument)
   '("0" . digit-argument)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("<" . meow-beginning-of-thing)
   '(">" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("C" . meow-change-save)
   '("d" . meow-delete)
   '("e" . meow-line)
   '("f" . meow-find)
   '("F" . meow-find-expand)
   '("g" . meow-keyboard-quit)
   '("G" . meow-goto-line)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-join)
   '("J" . delete-indentation)
   '("k" . meow-kill)
   '("l" . meow-till)
   '("L" . meow-till-expand)
   '("m" . meow-mark-word)
   '("M" . meow-mark-symbol)
   '("n" . meow-next)
   '("N" . meow-next-expand)
   '("o" . meow-block)
   '("O" . meow-block-expand)
   '("p" . meow-prev)
   '("P" . meow-prev-expand)
   '("q" . meow-quit)
   '("r" . meow-replace)
   '("R" . meow-replace-save)
   '("s" . meow-search)
   '("S" . meow-pop-search)
   '("t" . meow-right)
   '("T" . meow-right-expand)
   '("u" . undo)
   '("v" . meow-visit)
   '("w" . meow-next-word)
   '("W" . meow-next-symbol)
   '("x" . meow-save)
   '("y" . meow-yank)
   '("z" . meow-pop-selection)
   '("Z" . meow-pop-all-selection)
   '("&" . meow-query-replace)
   '("%" . meow-query-replace-regexp)
   '("<escape>" . meow-last-buffer)))
(use-package meow
  :demand t
  :init
  (meow-global-mode 1)
  :config
  ;; meow-setup is your custom function, see below
  (meow-setup)
  ;; If you want relative line number in NORMAL state(for display-line-numbers-mode)
  (meow-setup-line-number)
  ;; If you need setup indicator, see `meow-indicator' for customizing by hand.
  (meow-setup-indicator))
#+end_src

