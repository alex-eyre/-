**** load theme
     #+begin_src emacs-lisp
     (use-package cyberpunk-theme
	:init(load-theme 'cyberpunk t))
     (fringe-mode 0)
     #+end_src
**** garbage collection magic hack
does magic on the GC values to make start-up fast but the GC values
not ridiculous.
#+begin_src emacs-lisp
    (use-package gcmh
      :diminish gcmh-mode
      :init(gcmh-mode +1))
#+end_src
**** evil
     #+begin_src emacs-lisp
       (use-package evil
	 :demand t
	 :init
	 (setq evil-want-keybinding nil)
	 (evil-mode 1))
       (use-package evil-collection
	 :requires evil
	 :config(setq evil-collection-setup-minibuffer t)
	 :init(evil-collection-init))
       (use-package evil-magit
	 :requires evil
	 :requires magit
	 :config(setq evil-magit-state 'normal))

       (use-package evil-snipe
	 :diminish evil-snipe-mode
	 :diminish evil-snipe-override-mode
	 :diminish evil-snipe-local-mode
	 :requires evil
	 :hook(magit-mode . turn-off-evil-snipe-override-mode)
	 :init
	 (evil-snipe-mode +1)
	 (evil-snipe-override-mode +1))

     #+end_src
**** disable splash screen
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) 
  (setq initial-scratch-message nil)
#+end_src
**** org tweaks
#+BEGIN_SRC emacs-lisp
(require 'org-tempo)
#+END_SRC
**** misc utils.
***** restart emacs
      #+begin_src emacs-lisp
      (use-package restart-emacs
:commands(restart-emacs))
      #+end_src
**** line numbers
     #+begin_src emacs-lisp
     (defun display-line-numbers/relative ()
  "Relative"
  (interactive)
  (menu-bar--display-line-numbers-mode-relative))

(defun display-line-numbers/absolute ()
  "Absolute"
  (interactive)
  (menu-bar--display-line-numbers-mode-absolute))
(use-package display-line-numbers
  :hook
  (evil-insert-state-exit . (lambda () (display-line-numbers/relative)))
  (evil-insert-state-entry . (lambda () (display-line-numbers/absolute)))
  (prog-mode . display-line-numbers-mode)
  (org-mode . (lambda () (display-line-numbers-mode -1))))
     #+end_src
**** pdf
     #+begin_src emacs-lisp
     (use-package pdf-tools
  :load-path "site-lisp/pdf-tools/lisp"
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install :no-query))
     #+end_src

**** modeline
     #+begin_src emacs-lisp
     (use-package telephone-line
  :config
  (setq telephone-line-lhs
  	'((evil   . (telephone-line-evil-tag-segment))
  	  (accent . (telephone-line-vc-segment
  		     telephone-line-erc-modified-channels-segment
  		     telephone-line-process-segment))
  	  (nil    . (telephone-line-buffer-segment)))
  	telephone-line-rhs
  	'((nil    . (telephone-line-misc-info-segment))
  	  (accent . (telephone-line-major-mode-segment))
  	  (evil   . (telephone-line-airline-position-segment))))
  (telephone-line-mode 1))
     #+end_src

**** languages
***** haskell
      #+begin_src emacs-lisp
      (use-package haskell-mode
        :hook(haskell-mode . interactive-haskell-mode)
	:mode "\\.hs\\'"
	:interpreter "ghc")
      #+end_src
**** ivy & co.
#+begin_src emacs-lisp
(use-package ivy
:bind(:map ivy-minibuffer-map
("C-k" . ivy-previous-line)
("C-j" . ivy-next-line)))
(use-package counsel
  :init(counsel-mode 1))
(use-package swiper
  :bind(("C-s" . swiper)))
#+end_src
**** ace window
#+begin_src emacs-lisp
(use-package ace-window
  :bind("M-o" . ace-window))
#+end_src
