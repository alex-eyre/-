#+startup: overview
* Defuns
**** Restart Emacs
#+begin_src emacs-lisp
  (use-package restart-emacs
    :commands(restart-emacs))
#+end_src
**** Reload
Reloads the configuration
#+begin_src emacs-lisp
  (defun alex/reload ()
    "Reloads the config.org file, totally."
    (interactive)
    (delete-file (expand-file-name "config.el" user-emacs-directory))
    (restart-emacs))
  (provide 'alex/reload)
#+end_src
**** Config
#+begin_src emacs-lisp
  (defun alex/config ()
    (interactive)
    (find-file (expand-file-name "config.org" user-emacs-directory)))
  (provide 'alex/config)
#+end_src

**** Notes
#+begin_src emacs-lisp
  (defun alex/note ()
    (interactive)
    (projectile-find-file-in-directory "~/notes"))
  (provide 'alex/note)
#+end_src
**** Format
#+begin_src emacs-lisp
  (defun edit-src-block (src fn language)
    "Replace SRC org-element's value property with the result of FN.
      FN is a function that operates on org-element's value and returns a string.
      LANGUAGE is a string referring to one of orb-babel's supported languages.
      (https://orgmode.org/manual/Languages.html#Languages)"
    (let ((src-language (org-element-property :language src))
          (value (org-element-property :value src)))
      (when (string= src-language language)
        (let ((copy (org-element-copy src)))
          (org-element-put-property copy :value
                                    (funcall fn value))
          (org-element-set-element src copy)))))

  (defun format-elisp-string (string)
    "Indents elisp buffer string and reformats dangling parens."
    (with-temp-buffer
      (let ((inhibit-message t))
        (emacs-lisp-mode)
        (insert 
         (replace-regexp-in-string "[[:space:]]*
      [[:space:]]*)" ")" string))
        (indent-region (point-min) (point-max))
        (buffer-substring (point-min) (point-max)))))

  (defun format-elisp-src-blocks ()
    "Format Elisp src blocks in the current org buffer"
    (interactive)
    (save-mark-and-excursion
      (let ((AST (org-element-parse-buffer)))
        (org-element-map AST 'src-block
          (lambda (element) 
            (edit-src-block element #'format-elisp-string "emacs-lisp")))
        (delete-region (point-min) (point-max))
        (insert (org-element-interpret-data AST)))))
  (provide 'format-elisp-src-blocks)
#+end_src

* Workflow
**** Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands(magit))
#+end_src
**** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :straight ripgrep
    :straight projectile
    :config(setq projectile-completion-system 'ivy
      	       projectile-project-search-path '("~/projects")
      	       projectile-indexing-method 'alien))
#+end_src
Counsel-projectile replaces a bunch of the projectile functions to use ivy.
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :after projectile
    :commands(counsel-projectile
      	    counsel-projectile-switch-project
      	    counsel-projectile-find-file))
#+end_src
**** Company
#+begin_src emacs-lisp
  (use-package company
    :hook(prog-mode . company-mode))
#+end_src
#+begin_src emacs-lisp
  (use-package company-jedi
    :after company
    :hook(python-mode . (lambda () (add-to-list 'company-backends 'company-jedi))))
#+end_src

**** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :after yasnippet-snippets
    :after evil-leader
    :config(evil-leader/set-key "i" 'yas-insert-snippet)
    :hook(after-init . yas-global-mode))
#+end_src
#+begin_src emacs-lisp
  (use-package yasnippet-snippets)
#+end_src
#+begin_src emacs-lisp
  (use-package doom-snippets
    :disabled t
    :straight(doom-snippets :type git :host github :repo "hlissner/doom-snippets")
    :after yasnippet)
#+end_src
**** Aggressive Indent
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :disabled t
    :hook(prog-mode . aggressive-indent-mode))
#+end_src

**** Ace
#+begin_src emacs-lisp
  (use-package ace-window
    :config(setq aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n ?s))
    :bind("C-x o" . ace-window))
#+end_src
**** Multiterm
#+begin_src emacs-lisp
  (use-package multi-term
    :commands(multi-term
              multi-term-next
              multi-term-prev
              multi-term-dedicated-open
              multi-term-dedicated-close
              multi-term-dedicated-toggle
              multi-term-dedicated-select)
    :config(setq multi-term-program "/run/current-system/sw/bin/bash"))
#+end_src

**** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :hook(prog-mode . flycheck-mode))
#+end_src

**** iPython
#+begin_src emacs-lisp
  (use-package ein)
#+end_src
* Keyboard
**** Evil
I don't like RSI, so I use evil. Don't @ me.
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)
  (use-package evil
    :init(evil-mode 1))
#+end_src
Evil works better if you force modes to cooperate.
#+begin_src emacs-lisp
  (use-package evil-collection
    :init(evil-collection-init))
#+end_src
#+begin_src emacs-lisp
  (use-package evil-magit
    :after evil
    :after magit
    :config(setq evil-magit-state 'normal))
#+end_src
take me to your leader lmao
#+begin_src emacs-lisp
  (defun alex/goto-dashboard ()
    "switch to dashboard"
    (interactive)
    (switch-to-buffer "*dashboard*")
    (dashboard-refresh-buffer))
  (provide 'alex/goto-dashboard)
  (use-package evil-leader
    :init(global-evil-leader-mode)
    :hook(after-make-frame-functions . (lambda () (progn
      						  ;; globals
      						  (evil-leader/set-key
      						    "p" 'counsel-projectile-switch-project
      						    "o" 'counsel-projectile-find-file
      						    "e" 'find-file
      						    "b" 'switch-to-buffer
      						    "k" 'kill-buffer
      						    "d" 'alex/goto-dashboard
      						    "r" 'restart-emacs)
      						  ;; org-only
      						  (evil-leader/set-key-for-mode 'org-mode
      						    "a" 'org-insert-heading-after-current)))))
#+end_src
#+begin_src emacs-lisp
  (use-package evil-numbers
    :after evil
    :init
    (define-key evil-normal-state-map (kbd "C-c a") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c x") 'evil-numbers/dec-at-pt))
#+end_src
**** I'm too used to tmux
#+begin_src emacs-lisp
  (defun setup-input-decode-map ()
    (interactive)
    (define-key input-decode-map (kbd "C-a") (kbd "C-x"))
    (define-key input-decode-map (kbd "C-'") (kbd "M-x"))
    (define-key input-decode-map (kbd "M-a") (kbd "M-x")))
  (provide 'setup-input-decode-map)
  (add-hook 'after-make-frame-functions 'setup-input-decode-map)
  (global-set-key (kbd "C-x |") (lambda () (interactive)(split-window-horizontally) (other-window 1)))
  (global-set-key (kbd "C-x _") (lambda () (interactive)(split-window-vertically) (other-window 1)))
  (global-set-key (kbd "C-x \\") (lambda () (interactive)(split-window-horizontally) (other-window 1)))
  (global-set-key (kbd "C-x -") (lambda () (interactive)(split-window-vertically) (other-window 1)))
#+end_src
**** Miscellaneous Binds
FUTURE ALEX
DOES THIS BIND REALLY BELONG HERE
OR ARE YOU BEING LAZY?
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x t t") 'multi-term)
#+end_src

* User Interface
**** Dialogue Boxes
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src
**** Battery
#+begin_src emacs-lisp
  (add-hook #'after-init-hook 'display-battery-mode)
#+end_src
**** Font Size
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 110)
#+end_src
**** Font
#+begin_src emacs-lisp
  (set-frame-font "FiraCode Nerd Font 12" nil t)
#+end_src

** Libraries
**** All The Icons
This is required for pretty icons etc.
#+begin_src emacs-lisp
  (use-package all-the-icons
    :demand t)
#+end_src
** Meta UI
**** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5))
          dashboard-startup-banner 3)
    (dashboard-setup-startup-hook))
#+end_src
**** Counsel/Ivy
Better M-x and cool stuff
#+begin_src emacs-lisp
  (use-package ivy
    :straight ivy
    :straight counsel
    :init(counsel-mode))
#+end_src
**** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :config(setq doom-modeline-height 1)
    :custom-face
    (mode-line ((t (:height 100))))
    (mode-line-inactive ((t (:height 100))))
    :hook(after-init . doom-modeline-mode))
#+end_src
**** Dimmer
#+begin_src emacs-lisp
  (use-package dimmer
    :config
    (dimmer-configure-magit)
    (dimmer-configure-org)
    :hook(after-init . dimmer-mode))
#+end_src
**** Modern Fringes
#+begin_src emacs-lisp
  (use-package modern-fringes
    :straight(modern-fringes :type git :host github :repo "SpecialBomb/emacs-modern-fringes")
    :hook(after-init . modern-fringes-mode))
#+end_src

**** Indent Guide
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :config(setq highlight-indent-guides-method 'character)
    :hook(prog-mode . highlight-indent-guides-mode))
#+end_src

**** Line Numbers
#+begin_src emacs-lisp
  (defun display-line-numbers/relative ()
    "Relative"
    (interactive)
    (when (not (eq major-mode 'org-mode))
      (menu-bar--display-line-numbers-mode-relative)))

  (defun display-line-numbers/absolute ()
    "Absolute"
    (interactive)
    (when (not (eq major-mode 'org-mode))
      (menu-bar--display-line-numbers-mode-absolute)))
  (use-package display-line-numbers
    :hook
    (evil-insert-state-exit . (lambda () (display-line-numbers/relative)))
    (evil-insert-state-entry . (lambda () (display-line-numbers/absolute)))
    (prog-mode . display-line-numbers-mode)
    (org-mode . (lambda () (display-line-numbers-mode -1))))
#+end_src

**** Neotree
#+begin_src emacs-lisp
  (use-package neotree
    :config(setq neo-theme 'icons)
    :commands(neotree-show
              neotree-toggle))
#+end_src
** Colours
#+begin_src emacs-lisp
  (defun alex/day ()
    "Day mode"
    (interactive)
    (load-theme 'doom-acario-light t)
    (doom-themes-org-config))
  (defun alex/night ()
    "Night mode"
    (interactive)
    (load-theme 'doom-Iosvkem t)
    (doom-themes-org-config))
  (provide 'alex/day)
  (provide 'alex/night)
  (run-at-time "05:00" (* 60 60 24) (lambda () (enable-theme 'doom-acario-light)))
#+end_src

#+begin_src emacs-lisp
  (use-package doom-themes
    ;; :if(display-graphic-p)
    :after org
    :config
    (load-theme 'doom-Iosvkem t)
    (load-theme 'doom-acario-light t)
    (doom-themes-org-config))
#+end_src
* Org
Oh baby, there's some shit here boys.
#+begin_src emacs-lisp

  (defun org-force-open-current-window ()
    (interactive)
    (let ((org-link-frame-setup (quote
                                 ((vm . vm-visit-folder)
                                  (vm-imap . vm-visit-imap-folder)
                                  (gnus . gnus)
                                  (file . find-file)
                                  (wl . wl)))))
      (org-open-at-point)))
  ;; Depending on universal argument try opening link
  (defun org-open-maybe (&optional arg)
    (interactive "P")
    (if arg
        (org-open-at-point)
      (org-force-open-current-window)))
  (use-package org
    :mode("\\.org$" . org-mode)
    :commands(org-mode
              org-capture
              org-reload)
    :init
    (setq org-directory "~/notes"
          org-default-notes-file (expand-file-name "inbox.org" org-directory)
          org-agenda-files (list (expand-file-name org-directory)))
    (org-reload)
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (define-key org-mode-map "\C-c\C-o" 'org-open-maybe)
    :config
    (setq org-startup-indented t
          org-pretty-entities t
          org-hide-emphasis-markers t
          ;; show actually italicized text instead of /italicized text/
          org-agenda-block-separator ""
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t
          fill-column 140
          org-startup-with-inline-images t
          org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
    (remove-hook 'org-cycle-hook
                 #'org-optimize-window-after-visibility-change)
    :hook
    ;; (org-mode . (lambda () (progn
    ;;   			 (set-window-buffer nil (current-buffer))
    ;;   			 (setq left-margin-width 2
    ;;   			       right-margin-width 2
    ;;   			       header-line-format " "
    ;;   			       line-spacing
    ;;                          0.1))))
    (org-mode . auto-fill-mode)
    :custom-face
    (org-document-title ((t (:height 1.75))))
    (org-level-1 ((t (:inherit outline-1 :height 1.5))))
    (org-level-2 ((t (:inherit outline-2 :height 1.4))))
    (org-level-3 ((t (:inherit outline-3 :height 1.3))))
    (org-level-4 ((t (:inherit outline-4 :height 1.2))))
    (org-level-5 ((t (:inherit outline-5 :height 1.1))))
    (org-level-6 ((t (:inherit outline-6 :height 1.0))))
    (org-level-7 ((t (:inherit outline-7 :height 1.0))))
    (org-level-8 ((t (:inherit outline-8 :height 1.0)))))
#+end_src
**** Mixed Pitch Mode
#+begin_src emacs-lisp
  (use-package mixed-pitch
    :disabled t
    :after org
    :custom-face(variable-pitch ((t (:family "Tinos" :height 160))))
    :hook(org-mode . mixed-pitch-mode))
#+end_src
**** Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :disabled t
    :after org
    :hook(org-mode . org-bullets-mode)
    :config(setq org-bullets-bullet-list '(" ")))
#+end_src
**** Writeroom
#+begin_src emacs-lisp
  (use-package writeroom-mode
    :commands(writeroom-mode))
#+end_src
**** Spacing
#+begin_src emacs-lisp
  (use-package org-spacer
    :straight (org-spacer :type git :host github :repo "dustinlacewell/org-spacer.el")
    :config(setq org-spacer-element-blanks '((3 headline)
      					   (1 paragraph src-block table property-drawer))))
#+end_src
**** Pretty Tables
#+begin_src emacs-lisp
  (use-package org-pretty-table
    :disabled t
    :straight(org-pretty-table :type git :host github :repo "Fuco1/org-pretty-table")
    :hook
    (orgtbl-mode . org-pretty-table-mode)
    (org-mode . org-pretty-table-mode))
#+end_src
**** Grip
#+begin_src emacs-lisp
  (use-package grip-mode
    :commands(grip-mode))
#+end_src

**** Sublimity
#+begin_src emacs-lisp
  (use-package sublimity
    :straight(sublimity :type git :host github :repo "zk-phi/sublimity")
    :commands(sublimity-mode)
    :init
    (require 'sublimity-scroll)
    (require 'sublimity-attractive))
  (use-package hide-mode-line
    :hook(sublimity-mode . hide-mode-line-mode))
#+end_src

**** Hunspell
#+begin_src emacs-lisp
  (use-package flyspell
    :config(setq ispell-program-name "hunspell")
    :hook(org-mode . flyspell-mode))
#+end_src

**** Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/notes")
    (org-roam-completion-system 'ivy)
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n g" . org-roam-graph-show))
                :map org-mode-map
                (("C-c n i" . org-roam-insert))
                (("C-c n I" . org-roam-insert-immediate))))
#+end_src
**** Deft
#+begin_src emacs-lisp
  (use-package deft
    :after org
    :bind
    ("C-c n d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory "~/notes"))
#+end_src
**** Download
#+begin_src emacs-lisp
  (use-package org-download
    :config
    (setq org-download-method 'directory
      	org-download-heading-lvl nil)
    (setq-default org-download-image-dir "~/notes")
    :hook
    (dired-mode . org-download-enable)
    (org-mode . org-download-enable))
#+end_src

* Languages
**** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :mode("\\.rs\\'" . rust-mode))
#+end_src
**** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode("\\.nix\\'" . nix-mode))
#+end_src

**** Python
#+begin_src emacs-lisp
  (use-package python-black
    :hook(python-mode . python-black-on-save-mode))
#+end_src
#+begin_src emacs-lisp
  (use-package python-mode
    :config(setq python-environment-virtualenv '("nix" "run" "nixpkgs.python38Packages.virtualenv" "nixpkgs.python38" "nixpkgs.coreutils" "-c" "virtualenv")))
#+end_src

**** GLSL
#+begin_src emacs-lisp
  (use-package glsl-mode
    :mode("\\.compute\\'" . glsl-mode))
#+end_src

**** C# mode
#+begin_src emacs-lisp
  (use-package csharp-mode
    :mode("\\.cs\\'" . csharp-mode))
#+end_src
#+begin_src emacs-lisp

  (use-package omnisharp
    :after company
    :config(add-to-list 'company-backends 'company-omnisharp)
    :hook(csharp-mode . omnisharp-mode))
#+end_src
* Emacs as a Platform
**** YonChan
#+begin_src emacs-lisp
  (use-package q4
    :disabled t
    :straight(q4 :type git :host github :repo "rosbo018/q4")
    :demand t)
#+end_src
**** M4UE
#+begin_src emacs-lisp
  (use-package mu4e-alert
    :hook(after-init . mu4e-alert-enable-mode-line-display)
    :config(setq mu4e-alert-set-default-style 'libnotify))
#+end_src

#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
  (use-package mu4e
    :if (not (memq window-system '(w32)))
    :config (setq mu4e-contexts (list
                                 (make-mu4e-context
                                  :name "edinburgh"
                                  :vars '((mu4e-maildir . "~/.local/share/maildir/edinburgh")
                                          (mu4e-sent-folder . "/Sent Items")
                                          (mu4e-drafts-folder . "/Drafts") 
                                          (mu4e-trash-folder . "/Deleted Items")
                                          (mu4e-refile-folder . "/Archive")
                                          (user-mail-address . "A.Eyre@sms.ed.ac.uk")
                                          (smtpmail-local-domain . "ed.ac.uk")
                                          (smtpmail-smtp-user . "s2031787@ed.ac.uk")
                                          (smtpmail-smtp-server . "smtp.office365.com")
                                          (smtpmail-default-smtp-server . "smtp.office365.com")))
                                 (make-mu4e-context
                                  :name "alexeeyre"
                                  :vars '((mu4e-maildir . "~/.local/share/maildir/alexeeyre")
                                          (mu4e-drafts-folder . "/[Gmail]/Drafts")
                                          (mu4e-sent-folder . "/[Gmail]/Sent Mail")
                                          (mu4e-trash-folder . "/[Gmail]/Trash")
                                          (mu4e-sent-messages-behavior . 'delete)
                                          (smtpmail-starttls-credentials . '(("smtp.gmail.com" 587 nil nil)))
                                          (smtpmail-auth-credentials . '(("smtp.gmail.com" 587 "alexeeyre@gmail.com" nil)))
                                          (smtpmail-default-smtp-server . "smtp.gmail.com")
                                          (smtpmail-smtp-server . "smtp.gmail.com")
                                          (smtpmail-smtp-service . 587))))
                  mu4e-get-mail-command "mbsync -aC"
                  mu4e-update-interval 300
                  mu4e-show-images t
                  mu4e-show-addresses t
                  mail-user-agent 'mu4e-user-agent
                  message-send-mail-function 'smtpmail-send-it
                  smtpmail-stream-type 'starttls
                  smtpmail-smtp-service 587
                  mu4e-sent-messages-behavior 'delete
                  mu4e-confirm-quit nil
                  starttls-use-gnutls t
                  mu4e-bookmarks (list (make-mu4e-bookmark
      				      :name "Inbox"
      				      :query "NOT flag:trashed AND maildir:/Inbox"
      				      :key ?u))))
#+end_src

